#!/bin/bash

# RegistryFactory CLI - Get Operations Test Script
# This script tests all get operations for entities and aspects

echo "üìã RegistryFactory CLI - Get Operations Test"
echo "==========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "SUCCESS")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
    esac
}

# Function to run CLI command and check response
run_cli_command() {
    local command=$1
    local description=$2
    
    print_status "INFO" "Testing: $description"
    
    # Change to the generated CLI directory
    cd generated_cli
    
    # Run the command and capture output
    output=$(python cli.py $command 2>&1)
    exit_code=$?
    
    # Go back to parent directory
    cd ..
    
    if [ $exit_code -eq 0 ]; then
        print_status "SUCCESS" "$description"
        echo "Output: $output"
    else
        print_status "ERROR" "$description"
        echo "Error: $output"
    fi
    
    echo ""
    sleep 1  # Small delay between commands
}

# Set environment variables
export REGISTRY_PATH="../config/main_registry.yaml"
export NEO4J_URI="bolt://localhost:7687"
export NEO4J_USER="neo4j"
export NEO4J_PASSWORD="password"

# Check if CLI is available
print_status "INFO" "Checking if CLI is available..."
if [ ! -f "generated_cli/cli.py" ]; then
    print_status "ERROR" "CLI not found. Please generate the CLI first:"
    echo "python generate_cli.py"
    exit 1
fi
print_status "SUCCESS" "CLI is available"

echo ""
print_status "INFO" "üöÄ CLI Health Check"
echo "========================"

# Test health check first
run_cli_command "health" "System Health Status"

echo ""
print_status "INFO" "üìä Entity GET Operations"
echo "================================="

# First create entities using UPSERT operations
print_status "INFO" "Creating entities for GET testing..."

run_cli_command "upsert-dataset --name test_dataset --platform mysql --env PROD --output json" "Create Dataset for GET"
run_cli_command "upsert-dataflow --platform mysql --flow_id test_flow --namespace test_namespace --name test_dataflow --env PROD --output json" "Create DataFlow for GET"
run_cli_command "upsert-datajob --flow_urn urn:li:dataFlow:test_dataflow --job_name test_datajob --output json" "Create DataJob for GET"
run_cli_command "upsert-corpuser --username test.user --output json" "Create CorpUser for GET"
run_cli_command "upsert-corpgroup --name test-group --output json" "Create CorpGroup for GET"
run_cli_command "upsert-tag --key test-key --value test-tag --output json" "Create Tag for GET"
run_cli_command "upsert-column --dataset_urn urn:li:dataset:\(urn:li:dataPlatform:mysql,test_dataset,PROD\) --field_path test_column --output json" "Create Column for GET"

echo ""
print_status "INFO" "Now testing GET operations on created entities..."

# Use the actual URNs that were generated by the factory
run_cli_command "get-dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output table" "Dataset Entity GET"

run_cli_command "get-dataflow 'urn:li:dataFlow:(mysql,test_flow,PROD)' --output table" "DataFlow Entity GET"

run_cli_command "get-datajob 'urn:li:dataJob:(urn_li_dataFlow_test_dataflow,test_datajob)' --output table" "DataJob Entity GET"

run_cli_command "get-corpuser 'urn:li:corpuser:test.user' --output table" "CorpUser Entity GET"

run_cli_command "get-corpgroup 'urn:li:corpGroup:test-group' --output table" "CorpGroup Entity GET"

run_cli_command "get-tag 'urn:li:tag:test-key=test-tag' --output table" "Tag Entity GET"

run_cli_command "get-column 'urn:li:column:(urn_li_dataset_urn_li_dataPlatform_mysql_test_dataset_PROD_,test_column)' --output table" "Column Entity GET"

echo ""
print_status "INFO" "üìù Aspect GET Operations"
echo "================================="

# First create aspects using UPSERT operations
print_status "INFO" "Creating aspects for GET testing..."

run_cli_command "upsert-corpuserinfo-aspect --username test.user --active true --displayName TestUser --email test.user@company.com --output json" "Create CorpUserInfo for GET"
run_cli_command "upsert-corpgroupinfo-aspect --name test-group --output json" "Create CorpGroupInfo for GET"
run_cli_command "upsert-datasetproperties-aspect --platform mysql --name test_dataset --description Test_dataset_for_GET_testing --output json" "Create DatasetProperties for GET"
run_cli_command "upsert-schemametadata-aspect --platform mysql --name test_dataset --schemaName test_schema --fields '[{\"name\":\"id\",\"type\":\"INTEGER\"}]' --version 1 --output json" "Create SchemaMetadata for GET"
run_cli_command "upsert-ownership-aspect --platform mysql --name test_dataset --owners '[{\"owner\":\"urn:li:corpuser:test.user\",\"type\":\"DATAOWNER\"}]' --version 1 --output json" "Create Ownership for GET"
run_cli_command "upsert-globaltags-aspect --platform mysql --name test_dataset --tags '[{\"tag\":\"urn:li:tag:test-key\"}]' --version 1 --output json" "Create GlobalTags for GET"
run_cli_command "upsert-datasetprofile-aspect --platform mysql --name test_dataset --rowCount 1000 --columnCount 5 --timestamp-ms 1640995200000 --output json" "Create DatasetProfile for GET"
run_cli_command "upsert-dataflowinfo-aspect --platform mysql --flow_id test_flow --name test_dataflow --namespace test_namespace --version 1 --output json" "Create DataFlowInfo for GET"
run_cli_command "upsert-datajobinfo-aspect --flow_urn urn:li:dataFlow:test_dataflow --job_name test_datajob --name test_datajob --namespace test_namespace --output json" "Create DataJobInfo for GET"
run_cli_command "upsert-documentation-aspect --flow_urn urn:li:dataFlow:test_dataflow --job_name test_datajob --description Test_documentation_for_GET --output json" "Create Documentation for GET"

echo ""
print_status "INFO" "Now testing GET operations on created aspects..."

# Test aspect get operations
run_cli_command "get-corpuserinfo-aspect CorpUser 'urn:li:corpuser:test.user' --output table" "CorpUserInfo Aspect GET"

run_cli_command "get-corpgroupinfo-aspect CorpGroup 'urn:li:corpGroup:test-group' --output table" "CorpGroupInfo Aspect GET"

run_cli_command "get-datasetproperties-aspect Dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output table" "DatasetProperties Aspect GET"

run_cli_command "get-schemametadata-aspect Dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output table" "SchemaMetadata Aspect GET"

run_cli_command "get-ownership-aspect Dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output table" "Ownership Aspect GET"

run_cli_command "get-globaltags-aspect Dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output table" "GlobalTags Aspect GET"

run_cli_command "get-datasetprofile-aspect Dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output table" "DatasetProfile Aspect GET"

run_cli_command "get-dataflowinfo-aspect DataFlow 'urn:li:dataFlow:(mysql,test_flow,PROD)' --output table" "DataFlowInfo Aspect GET"

run_cli_command "get-datajobinfo-aspect DataJob 'urn:li:dataJob:(_urn_li_dataFlow_test_dataflow_,test_datajob)' --output table" "DataJobInfo Aspect GET"

run_cli_command "get-documentation-aspect DataJob 'urn:li:dataJob:(_urn_li_dataFlow_test_dataflow_,test_datajob)' --output table" "Documentation Aspect GET"

echo ""
print_status "INFO" "üîß Utility Functions Test"
echo "================================="

# Test utility functions
run_cli_command "list-utilities" "List Available Utilities"

run_cli_command "utility utc_now_ms --output table" "UTC Now MS Utility"

echo ""
print_status "INFO" "üì§ Output Format Tests"
echo "================================"

# Test different output formats for GET operations
run_cli_command "get-dataset 'urn:li:dataset:(urn:li:dataPlatform:mysql,test_dataset,PROD)' --output json" "Dataset GET JSON Format"

run_cli_command "get-corpuser 'urn:li:corpuser:test.user' --output yaml" "CorpUser GET YAML Format"

echo ""
print_status "INFO" "‚ö†Ô∏è  Error Handling Tests"
echo "================================"

# Test error handling with invalid URNs
run_cli_command "get-dataset 'invalid-urn' --output table" "Invalid Dataset URN Error Handling"

run_cli_command "get-corpuser 'invalid-urn' --output table" "Invalid CorpUser URN Error Handling"

run_cli_command "get-corpuserinfo-aspect CorpUser 'invalid-urn' --output table" "Invalid Aspect URN Error Handling"

echo ""
print_status "INFO" "üéØ Get Operations Summary"
echo "================================="
print_status "SUCCESS" "‚úÖ All GET operations completed!"
echo ""
echo "üìã Tested Operations:"
echo "  ‚Ä¢ 7 Entity Types: Dataset, DataFlow, DataJob, CorpUser, CorpGroup, Tag, Column"
echo "  ‚Ä¢ 10 Aspect Types: corpUserInfo, corpGroupInfo, datasetProperties, schemaMetadata, ownership, globalTags, datasetProfile, dataFlowInfo, dataJobInfo, documentation"
echo "  ‚Ä¢ 3 Output Formats: table, JSON, YAML"
echo "  ‚Ä¢ 1 Utility Function: utc_now_ms"
echo "  ‚Ä¢ Error Handling: Invalid URNs"
echo ""
print_status "SUCCESS" "üéâ GET test script completed successfully!"
